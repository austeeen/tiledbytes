#!/usr/bin/env bash


usage () {
    echo \
"-------------------------------------------------------------------------------
                           ~TiledBytes run script~

./run [OPTIONS]+

description:
    a script to build TiledBytes and run the test cases / example programs

    ** providing no options will build everything and run the test cases.
       equivalent to setting options 'b' and 't'

options:
    b       | build regularly
    c       | clear all build files first, then build the app
    i       | install TiledBytes to ./install
    g [app] | same as 'r' but using gdb
    r [app] | run app in the build dir
    t [...] | call 'test/run_test.sh [...]'
    u       | build and run unit tests (eq: './run t br' or './test/run_tests.sh br')
    h       | display this help page

    examples:
        ./run
        ./run a
        ./run bac
        ./run gb [app]
-------------------------------------------------------------------------------"
}

cwd=$PWD

quit() {
    if [[ $cwd != $PWD ]]; then
        cd $cwd
    fi
    exit $1
}

errcheck() {
    if [[ $1 -ne 0 ]]; then
        quit 1
    fi
}

# set up defaults
build_dir="build"
run_cmd=""
DO_BUILD=0
DO_CLEAN=0
DO_INSTALL=0
INSTALL_DST="."
DO_RUN=0

DO_TEST=0
DO_BUILD_AND_TEST=0

clean() {
    rm -rf ./build/*
}

build () {
    if [[ $DO_CLEAN -eq 1 ]]; then
        echo "--| cleaning build artifacts"
        rm -rf ./build/*
    fi
    echo "--| building lib"
    mkdir -p build && cd build
    errcheck $?
    cmake .. && cmake --build .
    errcheck $?
    cd ..
}

install() {
    echo "--| installing lib to $INSTALL_DST/install"
    mkdir ./install
    if [[ $? -ne 0 ]]; then
        echo "cleaning install artifacts" && rm -rf ./install/*
    fi
    cd build && cmake --install $INSTALL_DST
}

run_apps () {
    if [[ $# -ne 1 ]]; then
        echo "fatal: 'r' or 'g' option given but no app specified"
        quit 1
    fi
    echo "--| running app"
    cd $build_dir
    eval "$run_cmd $2"
}

run_tests () {
    echo "--| running tests"
    cd test
    eval "./run_tests.sh" $@
}

args=($(echo $1 | grep -o .))

for c in "${args[@]}"; do
    case $c in
        b)
            DO_BUILD=1;;
        c)
            DO_BUILD=1; DO_CLEAN=1;;
        i)
            DO_INSTALL=1;;
        g)
            DO_RUN=1;   run_cmd="gdb ./";;
        r)
            DO_RUN=1;   run_cmd="./";;
        t)
            DO_TEST=1;;
        u)
            DO_BUILD_AND_TEST=1;;
        h)
            usage; quit;;
        *)
            echo "bad arg: $c";;
  esac
done

if [[ $DO_TEST -eq 1 && $DO_RUN -eq 1 ]]; then
    echo "warning: both 't' and 'r|g' options were specified, but only one can be used. choosing 't'"
    DO_RUN=0
fi

if [[ $DO_BUILD -eq 1 ]]; then
    build
fi

if [[ $DO_INSTALL -eq 1 ]]; then
    install $2
fi

if [[ $DO_BUILD_AND_TEST -eq 1 ]]; then
    run_tests br
fi

if [[ $DO_TEST -eq 1 ]]; then
    shift
    run_tests $@
fi

if [[ $DO_RUN -eq 1 ]]; then
    run_apps $2
fi

quit 0
